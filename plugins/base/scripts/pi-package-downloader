#!/usr/bin/env bash
#
# Downloads Raspberry Pi packages from mirrors based on APT error logs

set -e

REPO_DIR="$HOME/pi_repo"
TEMP_FILE="/tmp/pi_packages.txt"

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Mirror lists
DEBIAN_MIRRORS=(
    "http://deb.debian.org"
    "http://ftp.debian.org"
    "http://mirror.csclub.uwaterloo.ca"
    "http://ftp.us.debian.org"
)

RASPI_MIRRORS=(
    "http://archive.raspberrypi.org"
    "http://mirror.ox.ac.uk/sites/archive.raspberrypi.org"
    "http://mirrors.aliyun.com/raspbian"
)

SECURITY_MIRRORS=(
    "http://security.debian.org"
    "http://ftp.debian.org"
)

# Function to show help message
show_help() {
    echo "Usage: pi-package-downloader [options]"
    echo ""
    echo "Options:"
    echo "  -h, --help     Show this help message"
    echo "  -f, --file     Specify input file containing APT errors"
    echo ""
    echo "If no file is specified, the script will prompt for APT errors via stdin."
}

# Function to extract package URLs from APT errors
extract_package_urls() {
    local input="$1"
    echo "$input" | grep -oP 'http://[^ ]+'
}

# Function to try downloading from different mirrors
try_download() {
    local url="$1"
    local filename="$(basename "$url")"
    local original_domain="$(echo "$url" | grep -oP 'http://[^/]+')"
    local path="${url#$original_domain}"  # Get the path after the domain
    local mirrors=()
    
    echo -e "${BLUE}Processing:${NC}"
    echo "Original URL: $url"
    echo "Domain: $original_domain"
    echo "Path: $path"
    
    # Select mirror list based on original domain
    case "$original_domain" in
        "http://deb.debian.org")
            mirrors=("${DEBIAN_MIRRORS[@]}")
            ;;
        "http://archive.raspberrypi.org")
            mirrors=("${RASPI_MIRRORS[@]}")
            ;;
        "http://security.debian.org")
            mirrors=("${SECURITY_MIRRORS[@]}")
            ;;
        *)
            mirrors=("$original_domain")
            ;;
    esac
    
    # Try each mirror
    for mirror in "${mirrors[@]}"; do
        local new_url="${mirror}${path}"
        echo -e "${BLUE}Trying mirror:${NC} $new_url"
        if curl -L --fail --silent --output "$REPO_DIR/$filename" "$new_url"; then
            echo -e "${GREEN}Successfully downloaded:${NC} $filename"
            return 0
        fi
    done
    
    echo -e "${RED}Failed to download:${NC} $filename"
    return 1
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -f|--file)
            INPUT_FILE="$2"
            shift 2
            ;;
        *)
            echo "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Clear and recreate repository directory
rm -rf "$REPO_DIR"
mkdir -p "$REPO_DIR"

# Get input either from file or stdin
if [ -n "$INPUT_FILE" ]; then
    if [ ! -f "$INPUT_FILE" ]; then
        echo -e "${RED}Error:${NC} Input file not found: $INPUT_FILE"
        exit 1
    fi
    cat "$INPUT_FILE" > "$TEMP_FILE"
else
    echo "Paste APT errors (press Ctrl+D when done):"
    cat > "$TEMP_FILE"
fi

# Extract unique package URLs
echo -e "\n${BLUE}Extracting package URLs...${NC}"
URLS=$(extract_package_urls "$(cat "$TEMP_FILE")" | sort -u)

if [ -z "$URLS" ]; then
    echo -e "${RED}Error:${NC} No package URLs found in input"
    exit 1
fi

# Download packages
echo -e "\n${BLUE}Downloading packages to:${NC} $REPO_DIR"
echo "$URLS" | while read -r url; do
    try_download "$url"
done

# Cleanup
rm -f "$TEMP_FILE"

echo -e "\n${GREEN}Done!${NC} Packages have been downloaded to: $REPO_DIR"
echo "You can now transfer these packages to your Raspberry Pi and install them using:"
echo "  sudo dpkg -i $REPO_DIR/*.deb" 